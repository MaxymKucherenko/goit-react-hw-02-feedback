{"version":3,"sources":["Components/buttons/Buttons.js","Components/SectionTitle/SectionTitle.js","Components/Statistics/statistics.js","Components/SectionTitle/Notification.js","App.js","index.js","Components/Statistics/statistics.module.css"],"names":["Controls","clickButton","options","map","option","type","onClick","Section","title","children","className","Statistics","good","neutral","bad","total","positiveFeedback","styles","span","Notification","message","App","state","Name","setState","prevState","Object","values","this","reduce","item","acc","percent","Math","round","React","Component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"4OAiBeA,EAfE,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,QAAhB,OACf,8BACGA,EAAQC,KAAI,SAACC,GAAD,OACX,wBAEEC,KAAK,SACLC,QAAS,WACPL,EAAYG,IAJhB,SAMGA,GALIA,SCGEG,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,qCACE,oBAAIC,UAAU,QAAd,SAAuBF,IACtBC,M,gBCUUE,EAZI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,iBAA9B,OACjB,sBAAKN,UAAU,aAAf,UACE,uBAAMA,UAAWO,IAAOC,KAAxB,mBAAqCN,KACrC,uBAAMF,UAAWO,IAAOC,KAAxB,sBAAwCL,KACxC,uBAAMH,UAAWO,IAAOC,KAAxB,kBAAoCJ,KACpC,uBAAMJ,UAAWO,IAAOC,KAAxB,oBAAsCH,KACtC,uBAAML,UAAWO,IAAOC,KAAxB,gCACsBF,EADtB,YCHWG,EAHM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACjB,mBAAGV,UAAU,UAAb,SAAwBU,KCiDbC,G,kNA7CbC,MAAQ,CACNV,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPR,QAAU,SAACiB,GACT,EAAKC,UAAS,SAACC,GAAD,sBACXF,EAAOE,EAAUF,GAAQ,O,4CAI9B,WACE,IAAMR,EAAQW,OAAOC,OAAOC,KAAKN,OAAOO,QAAO,SAACC,EAAMC,GACpD,OAAQA,EAAOD,IACd,GACGE,EAAUC,KAAKC,MAAON,KAAKN,MAAMV,KAAOG,EAAS,KACvD,OACE,sBAAKL,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,wDAEF,cAAC,EAAD,CACET,YAAa2B,KAAKtB,QAClBJ,QAAS,CAAC,OAAQ,UAAW,SAG/B,cAAC,EAAD,CAASM,MAAM,aAAf,SACGO,EAAQ,EACP,cAAC,EAAD,CACEH,KAAMgB,KAAKN,MAAMV,KACjBC,QAASe,KAAKN,MAAMT,QACpBC,IAAKc,KAAKN,MAAMR,IAChBC,MAAOA,EACPC,iBAAkBgB,IAGpB,cAAC,EAAD,CAAcZ,QAAQ,+B,GAtChBe,IAAMC,YCDxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BC,EAAOC,QAAU,CAAC,KAAO,4B","file":"static/js/main.d66cbaf4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Controls = ({ clickButton, options }) => (\r\n  <div>\r\n    {options.map((option) => (\r\n      <button\r\n        key={option}\r\n        type=\"button\"\r\n        onClick={() => {\r\n          clickButton(option);\r\n        }}>\r\n        {option}\r\n      </button>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Controls;","import React from \"react\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <>\r\n    <h3 className='title'>{title}</h3>\r\n    {children}\r\n  </>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport styles from './statistics.module.css'\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positiveFeedback }) => (\r\n  <div className=\"Statistics\">\r\n    <span className={styles.span}>Good: {good}</span>\r\n    <span className={styles.span}>Neutral: {neutral}</span>\r\n    <span className={styles.span}>Bad: {bad}</span>\r\n    <span className={styles.span}>Total: {total}</span>\r\n    <span className={styles.span}>\r\n      Positive feedback: {positiveFeedback} %\r\n    </span>\r\n  </div>\r\n);\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\n\r\n\r\nconst Notification = ({ message }) =>\r\n    <p className='message'>{message}</p>;\r\n\r\nexport default Notification;\r\n","import React from \"react\";\nimport Controls from \"./Components/buttons/Buttons\";\nimport Section from \"./Components/SectionTitle/SectionTitle\";\nimport Statistics from \"./Components/Statistics/statistics\";\nimport Notification from \"./Components/SectionTitle/Notification\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onClick = (Name) => {\n    this.setState((prevState) => ({\n      [Name]: prevState[Name] + 1,\n    }));\n  };\n\n  render() {\n    const total = Object.values(this.state).reduce((item, acc) => {\n      return (acc += item);\n    }, 0);\n    const percent = Math.round((this.state.good / total) * 100);\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Please leave feedback</p>\n        </header>\n        <Controls\n          clickButton={this.onClick}\n          options={[\"good\", \"neutral\", \"bad\"]}\n        />\n\n        <Section title=\"Statistics\">\n          {total > 0 ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={total}\n              positiveFeedback={percent}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"statistics_span__qW1dw\"};"],"sourceRoot":""}